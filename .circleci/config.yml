version: 2.1

orbs:
  win: circleci/windows@1.0.0

executors:
  linux-node:
    docker:
      - image: circleci/node:stretch
  linux-python:
    docker:
      - image: cimg/python:3.10.7
  bionic:
    docker:
      - image: emscripten/emscripten-ci
    environment:
      LANG: "C.UTF-8"
      EMCC_CORES: "4"
      EMSDK_NOTTY: "1"
      EMTEST_WASI_SYSROOT: "~/wasi-sdk/wasi-sysroot"
      EMTEST_BUILD_VERBOSE: "2"
      EMTEST_DETECT_TEMPFILE_LEAKS: "1"
  mac:
    environment:
      EMSDK_NOTTY: "1"
    macos:
      xcode: "13.4.1"
    resource_class: macos.x86.medium.gen2
  mac-arm64:
    environment:
      EMSDK_NOTTY: "1"
    macos:
      xcode: "14.2.0"
    resource_class: macos.m1.medium.gen1

commands:
  download-chrome:
    description: "Download Chrome"
    steps:
      - run:
          name: Download Chrome
          command: |
            apt-get install -y libu2f-udev libvulkan1
            wget -O ~/chrome.deb https://dl.google.com/linux/direct/google-chrome-beta_current_amd64.deb
            dpkg -i ~/chrome.deb

  emsdk-env:
    description: "emsdk_env.sh"
    steps:
      - run:
          name: emsdk_env.sh
          command: |
            source ~/emsdk/emsdk_env.sh >> $BASH_ENV
            echo "export EM_CONFIG=~/emsdk/.emscripten" >> $BASH_ENV

  npm-install:
    description: "npm ci"
    steps:
      - run:
          name: npm ci
          command: npm ci

  pip-install:
    description: "pip install"
    parameters:
      python:
        description: "Python executable to use"
        type: string
        default: python3
    steps:
      - run:
          name: pip install
          command: |
            << parameters.python >> -m pip install -r requirements-dev.txt

  install-node-version:
    description: "Install a specific version of Node.js"
    parameters:
      node_version:
        description: "Version of Node.js to install"
        type: string
      canary:
        description: "Install a canary version of Node.js"
        type: boolean
        default: false
    steps:
      - run:
          name: Setup Node.js v<< parameters.node_version >>
          command: |
            cd $HOME
            version=<< parameters.node_version >>
            if [[ << parameters.canary >> == "true" ]]; then
              wget https://nodejs.org/download/v8-canary/v${version}/node-v${version}-linux-x64.tar.xz
            else
              wget https://nodejs.org/dist/v${version}/node-v${version}-linux-x64.tar.xz
            fi
            tar xf node-v${version}-linux-x64.tar.xz
            echo "export PATH=\"$HOME/node-v${version}-linux-x64/bin:\$PATH\"" >> $BASH_ENV

  install-node-latest:
    description: "Install the latest version of Node.js"
    steps:
      - install-node-version:
          node_version: "19.0.0"

  install-node-canary:
    description: "Install the latest canary version of Node.js"
    steps:
      - install-node-version:
          node_version: "19.0.0"
          canary: true

  install-v8:
    description: "Install V8"
    steps:
      - run:
          name: Install V8
          command: |
            git clone https://chromium.googlesource.com/chromium/tools/depot_tools.git
            export PATH="$PATH:$PWD/depot_tools"
            mkdir v8
            cd v8
            fetch v8
            cd v8
            git checkout 9.4.0
            gclient sync
            tools/dev/v8gen.py x64.release
            ninja -C out.gn/x64.release

  build:
    description: "Build"
    steps:
      - checkout
      - run:
          name: Build
          command: make build

  build-libs:
    description: "Build libraries"
    steps:
      - run:
          name: Build Libraries
          command: |
            make build-libs
            make test-libs

  persist:
    description: "Persist files"
    steps:
      - persist_to_workspace:
          root: ./
          paths:
            - build/
            - libs/

  prepare-for-tests:
    description: "Prepare for tests"
    steps:
      - run:
          name: Prepare for Tests
          command: |
            make prepare-for-tests
            make prepare-for-integration-tests

  upload-test-results:
    description: "Upload test results"
    steps:
      - store_test_results:
          path: test-results

  run-tests:
    description: "Run tests"
    steps:
      - run:
          name: Run Unit Tests
          command: make unit-tests
      - run:
          name: Run Integration Tests
          command: make integration-tests

  freeze-cache:
    description: "Freeze cache"
    steps:
      - run:
          name: Freeze Cache
          command: |
            mkdir -p ~/cache
            tar czf ~/cache/cache.tar.gz .circleci/

  run-tests-linux:
    description: "Run tests on Linux"
    steps:
      - setup_remote_docker:
          version: 20.10.8
      - run:
          name: Run Tests on Linux
          command: make test

  setup-macos:
    description: "Setup macOS"
    steps:
      - checkout
      - run:
          name: Setup macOS
          command: make setup-macos

  test-firefox:
    description: "Test on Firefox"
    steps:
      - setup_remote_docker:
          version: 20.10.8
      - run:
          name: Test on Firefox
          command: make test-firefox

  test-chrome:
    description: "Test on Chrome"
    steps:
      - setup_remote_docker:
          version: 20.10.8
      - download-chrome
      - run:
          name: Test on Chrome
          command: make test-chrome

jobs:
  build-and-test:
    executor: linux-node
    steps:
      - checkout
      - npm-install
      - build
      - run-tests
      - persist
      - upload-test-results

  build-libs-and-tests:
    executor: linux-python
    steps:
      - checkout
      - pip-install:
          python: python3.10
      - build-libs
      - prepare-for-tests
      - run-tests
      - persist
      - upload-test-results

  build-macos:
    executor: mac
    steps:
      - setup-macos
      - build
      - run-tests
      - persist
      - upload-test-results

  test-on-linux:
    executor: linux-node
    steps:
      - checkout
      - npm-install
      - run-tests-linux

  test-on-macos:
    executor: mac
    steps:
      - setup-macos
      - run-tests

  test-on-chrome:
    executor: linux-node
    steps:
      - checkout
      - npm-install
      - test-chrome

  test-on-firefox:
    executor: linux-node
    steps:
      - checkout
      - npm-install
      - test-firefox

workflows:
  build-and-test:
    jobs:
      - build-and-test

  build-libs-and-tests:
    jobs:
      - build-libs-and-tests

  build-macos:
    jobs:
      - build-macos

  test-on-linux:
    jobs:
      - test-on-linux

  test-on-macos:
    jobs:
      - test-on-macos

  test-on-chrome:
    jobs:
      - test-on-chrome

  test-on-firefox:
    jobs:
      - test-on-firefox
